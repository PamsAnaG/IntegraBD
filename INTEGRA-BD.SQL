-- ROL
CREATE TABLE ROL(
	ID_ROL INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	DESCRIPCION VARCHAR(200) NOT NULL
);

--VISTA ROLES
CREATE OR REPLACE VIEW V_ROL AS 
SELECT ID_ROL, NOMBRE, ESTATUS, DESCRIPCION
FROM ROL
WHERE ESTATUS = 'A';

-- USUARIOS
-- TABLA QUE ALMACENA LOS USUARIOS AUTORIZADOS PARA INGRESAR AL SISTEMA
CREATE TABLE USUARIO(
	ID_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	APPATERNO VARCHAR(200) NOT NULL,
	APMATERNO VARCHAR(200) NOT NULL,
	USUARIO VARCHAR(50) NOT NULL,
	PASSWORD VARCHAR(200) NOT NULL,
	CORREO_ELECTRONICO VARCHAR(80) NOT NULL,
	NUMERO_MOVIL VARCHAR(30) NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	ID_ROL INT NOT NULL,
	FOREIGN KEY (ID_ROL) REFERENCES ROL(ID_ROL)
);

-- VISTA DE USUARIOS
CREATE OR REPLACE VIEW V_USUARIO AS 
SELECT U.ID_USUARIO, U.NOMBRE, U.APPATERNO, U.APMATERNO, U.USUARIO, U.PASSWORD, 
U.CORREO_ELECTRONICO, U.NUMERO_MOVIL, U.ID_ROL, VR.NOMBRE NOMBRE_ROL, VR.DESCRIPCION
FROM USUARIO U, V_ROL VR
WHERE U.ID_ROL = VR.ID_ROL 
AND U.ESTATUS = 'A';


-- PRIVILEGIOS
-- TABLA PARA ALMACENAR LOS PRIVILEGIOS QUE SE LE OTORGARÁN A LOS USUARIOS
CREATE TABLE PRIVILEGIO(
	ID_PRIVILEGIO INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	DESCRIPCION VARCHAR(200) NOT NULL	
);

-- VISTA DE USUARIOS
CREATE OR REPLACE VIEW V_PRIVILEGIO AS 
SELECT ID_PRIVILEGIO, NOMBRE, ESTATUS, DESCRIPCION
FROM PRIVILEGIO
WHERE ESTATUS = 'A';

-- RELACIÓN ROL PRIVILEGIO
-- TABLA QUE RELACIONA LOS PRIVILEGIOS Y EL ROL DUEÑO DE LOS MISMOS, ESTA TABLA SOLO SE UTILZA PARA ASIGNAR LOS PRIVILEGIOS CONFIGURADOS AQUÍ CUANDO SE REGISTRA UN NUEVO USUARIO
-- DENTRO DEL ROL
CREATE TABLE REL_ROL_PRIVILEGIO(
	ID_REL_R_P INT AUTO_INCREMENT PRIMARY KEY,
	ID_ROL INT NOT NULL,
	ID_PRIVILEGIO INT NOT NULL,
	FOREIGN KEY (ID_ROL) REFERENCES ROL(ID_ROL),
	FOREIGN KEY (ID_PRIVILEGIO) REFERENCES PRIVILEGIO(ID_PRIVILEGIO)
);

-- RELACIÓN USUARIO/PRIVILEGIO
-- TABLA QUE RELACIONA LOS USUARIOS CON LOS PRIVILEGIOS EXTRAS QUE SEA NECESARIO ASIGNARLES INDEPENDIENTEMENTE DEL ROL AL QUE PERTENEZCAN
CREATE TABLE REL_USUARIO_P(
	ID_REL_U_P INT AUTO_INCREMENT PRIMARY KEY,
	ID_USUARIO INT NOT NULL,
	ID_PRIVILEGIO INT NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO),
	FOREIGN KEY (ID_PRIVILEGIO) REFERENCES PRIVILEGIO(ID_PRIVILEGIO)
);

-- VISTA DE PRIVILEGIOS USUARIO
CREATE OR REPLACE VIEW V_USUARIO_PRIVILEGIO AS 
SELECT UP.ID_REL_U_P, UP.ID_USUARIO, VU.USUARIO, UP.ID_PRIVILEGIO, 
P.NOMBRE, P.DESCRIPCION
FROM REL_USUARIO_P UP, V_PRIVILEGIO P, V_USUARIO VU
WHERE UP.ID_PRIVILEGIO = P.ID_PRIVILEGIO
AND VU.ID_USUARIO = UP.ID_USUARIO
AND UP.ESTATUS = 'A';

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- CLIENTES
CREATE TABLE CLIENTE(
	ID_CLIENTE INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	CORREO_ELECTRONICO VARCHAR(80) NOT NULL,
	NUMERO_MOVIL VARCHAR(30) NOT NULL, 
	ESTATUS VARCHAR(3) NOT NULL
);

CREATE OR REPLACE VIEW V_CLIENTE AS 
SELECT ID_CLIENTE, NOMBRE, CORREO_ELECTRONICO, NUMERO_MOVIL, 
ESTATUS
FROM CLIENTE
WHERE ESTATUS = 'A';

-- ASOCIADO
CREATE TABLE ASOCIADO(
	ID_ASOCIADO INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	CORREO_ELECTRONICO VARCHAR(80) NOT NULL,
	NUMERO_MOVIL VARCHAR(30) NOT NULL, 
	ESTATUS VARCHAR(3) NOT NULL
);

CREATE OR REPLACE VIEW V_ASOCIADO AS 
SELECT ID_ASOCIADO, NOMBRE, CORREO_ELECTRONICO, NUMERO_MOVIL, 
ESTATUS
FROM ASOCIADO
WHERE ESTATUS = 'A';

-- TIPO PROYECTO
CREATE TABLE TIPO_PROYECTO(
	ID_TIPO_PROYECTO INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	DESCRIPCION VARCHAR(800) NOT NULL, 
	ESTATUS VARCHAR(3) NOT NULL
);

CREATE OR REPLACE VIEW V_TIPO_PROYECTO AS 
SELECT ID_TIPO_PROYECTO, NOMBRE, DESCRIPCION
FROM TIPO_PROYECTO
WHERE ESTATUS = 'A';

-- CLASE PROYECTO
CREATE TABLE CLASE_PROYECTO(
	ID_CLASE_PROYECTO INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	DESCRIPCION VARCHAR(800) NOT NULL, 
	ESTATUS VARCHAR(3) NOT NULL
);

CREATE OR REPLACE VIEW V_CLASE_PROYECTO AS 
SELECT ID_CLASE_PROYECTO, NOMBRE, DESCRIPCION
FROM CLASE_PROYECTO
WHERE ESTATUS = 'A';

-- CLASE PROYECTO
CREATE TABLE TIPO_FACTURACION(
	ID_TP_FACTURACION INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	DESCRIPCION VARCHAR(800) NOT NULL, 
	ESTATUS VARCHAR(3) NOT NULL
);

CREATE OR REPLACE VIEW V_TIPO_FACTURACION AS 
SELECT ID_TP_FACTURACION, NOMBRE, DESCRIPCION
FROM TIPO_FACTURACION
WHERE ESTATUS = 'A';

-- MODALIDAD PROYECTO
CREATE TABLE MODALIDAD_PROYECTO(
	ID_MODALIDAD INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,
	DESCRIPCION VARCHAR(800) NOT NULL, 
	ESTATUS VARCHAR(3) NOT NULL
);

CREATE OR REPLACE VIEW V_MODALIDAD_PROYECTO AS 
SELECT ID_MODALIDAD, NOMBRE, DESCRIPCION
FROM MODALIDAD_PROYECTO
WHERE ESTATUS = 'A';


----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- CABECERA PROYECTO
CREATE TABLE PROYECTO(
	ID_PROYECTO INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE VARCHAR(200) NOT NULL,	
	FECHA_INICIO DATETIME NOT NULL,
	FECHA_FIN DATETIME NOT NULL,
	ID_CLIENTE INT NOT NULL,
	ID_TIPO_PROYECTO INT NOT NULL,	
	ID_CLASE_PROYECTO INT NOT NULL,
	ID_TP_FACTURACION INT NOT NULL,
	ID_MODALIDAD INT NOT NULL,
	ESTATUS VARCHAR(10) NOT NULL,
    INDEX (ID_PROYECTO),
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),    
    FOREIGN KEY (ID_TIPO_PROYECTO) REFERENCES TIPO_PROYECTO(ID_TIPO_PROYECTO),    
    FOREIGN KEY (ID_CLASE_PROYECTO) REFERENCES CLASE_PROYECTO(ID_CLASE_PROYECTO),
    FOREIGN KEY (ID_TP_FACTURACION) REFERENCES TIPO_FACTURACION(ID_TP_FACTURACION),
    FOREIGN KEY (ID_MODALIDAD) REFERENCES MODALIDAD_PROYECTO(ID_MODALIDAD)
);

-- ARCHIVO PROYECTO
CREATE TABLE ARCHIVO_PROYECTO(
	ID_ARCHIVO_PRY INT AUTO_INCREMENT PRIMARY KEY,
	ID_PROYECTO INT NOT NULL,	
	ARCHIVO LONGBLOB NOT NULL,	
	FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO(ID_PROYECTO)
);

-- RELACION ASOCIADOS
CREATE TABLE ASOCIADO_PROYECTO(
	ID_REL_AS_PR INT AUTO_INCREMENT PRIMARY KEY,
	ID_ASOCIADO INT NOT NULL,
	ID_PROYECTO INT NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	FOREIGN KEY (ID_ASOCIADO) REFERENCES ASOCIADO(ID_ASOCIADO),
	FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO(ID_PROYECTO)
);


-- TABLA DE TAREAS
CREATE TABLE TAREA_PROYECTO(
	ID_TAREA INT AUTO_INCREMENT PRIMARY KEY,
	ID_PROYECTO INT NOT NULL,
	ID_TAREA_PADRE INT NULL,
	NOMBRE VARCHAR(200) NOT NULL,
	FECHA_INICIO DATETIME NOT NULL,
	FECHA_FIN DATETIME NOT NULL,
	DURACION INT NOT NULL,
	PORCENTAJE_COMPLETADO INT NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	INDEX (ID_PROYECTO),	
    FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO(ID_PROYECTO)  
);

-- RECURSO
CREATE TABLE RECURSO(
	ID_RECURSO INT AUTO_INCREMENT PRIMARY KEY,
	ID_USUARIO INT NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	TIPO_RECURSO VARCHAR(300) NOT NULL,
	COSTO_HORA INT NOT NULL,
	INDEX (ID_RECURSO),	
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO)  
);

CREATE OR REPLACE VIEW V_RECURSO AS 
select usu.ID_USUARIO, usu.NOMBRE, usu.APPATERNO, usu.APMATERNO, usu.USUARIO, 
usu.CORREO_ELECTRONICO, usu.NUMERO_MOVIL, usu.ID_ROL, usu.NOMBRE_ROL, 
usu.DESCRIPCION, r.ID_RECURSO, r.TIPO_RECURSO, r.COSTO_HORA
from v_usuario usu, recurso r
where r.ID_USUARIO = usu.ID_USUARIO
and r.ESTATUS = 'A'


-- RECURSOS TAREAS
CREATE TABLE REL_RECURSO_TAREA(
	ID_RECURSO_TAREA INT AUTO_INCREMENT PRIMARY KEY,
	ID_TAREA INT NOT NULL,
	ID_RECURSO INT NOT NULL,
	ESTATUS VARCHAR(3) NOT NULL,
	INDEX (ID_RECURSO_TAREA),	
    FOREIGN KEY (ID_TAREA) REFERENCES TAREA_PROYECTO(ID_TAREA),  
    FOREIGN KEY (ID_RECURSO) REFERENCES RECURSO(ID_RECURSO)
);


CREATE OR REPLACE VIEW V_RECURSO_TAREA AS 
select rect.ID_TAREA, rect.ID_RECURSO, rec.NOMBRE NOMBRE_RECURSO, rec.APPATERNO, rec.APMATERNO,
rec.USUARIO, rec.CORREO_ELECTRONICO, rec.NUMERO_MOVIL, rec.ID_ROL, tarea.ID_PROYECTO,  tarea.ID_TAREA_PADRE, 
tarea.NOMBRE NOMBRE_TAREA, tarea.FECHA_INICIO, tarea.FECHA_FIN, 
tarea.DURACION, tarea.PORCENTAJE_COMPLETADO
from REL_RECURSO_TAREA rect
join tarea_proyecto tarea on (rect.ID_TAREA = tarea.ID_TAREA)
join v_recurso rec on (rec.ID_RECURSO = rect.ID_RECURSO)

